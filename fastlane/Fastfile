# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

require 'fileutils'

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Just build a dev build, no signing or upload"
  lane :justbuildDevelopmentbuild do
    xcversion(version: "15.4")
    fetchDistributionCertificatesAndProfiles
    match(type: "development")
    build_app(scheme: "SpellingAppOnline",
      configuration: "Debug",
      export_method: "development",
      export_xcargs: "-allowProvisioningUpdates")
  end

  desc "Build AdHoc App"
  lane :build_adhoc_app do
    setup_xcode_version
    app_store_connect_api_key_setup
    match(
      type: "adhoc",
      app_identifier: ENV['APPFILE_APP_IDENTIFIER'],                        # Make sure this is 'adhoc' for AdHoc distribution
      readonly: false,
      verbose: true
    )
    build_app(
      scheme: "SpellingAppOnline",
      configuration: "Adhoc",
      workspace: "SpellingAppOnline.xcworkspace",
      export_method: "ad-hoc",
      export_options: {
        provisioningProfiles: {
          ENV['APPFILE_APP_IDENTIFIER'] => "match AdHoc #{ENV['APPFILE_APP_IDENTIFIER']}"
        }
      },
      export_xcargs: "-allowProvisioningUpdates",
      output_directory: "gh-pages",
      output_name: "SpellingAppOnline-AdHoc.ipa"
    )
    
  end

  desc "Generate .plist and HTML for distribution"
  lane :generate_plist_and_html do |options|
    ipa_path = "../gh-pages/SpellingAppOnline-AdHoc.ipa"
    ipa_url = "https://getoffit.github.io/SpellingAppOnline/#{File.basename(ipa_path)}"
    plist_path = "../gh-pages/manifest.plist"
    html_path = "../gh-pages/index.html"

  # Ensure the output directory exists
  FileUtils.mkdir_p('../gh-pages')

  # Copy the .ipa file to the gh-pages directory
  # FileUtils.cp(ipa_path, ipa_destination_path)

    # Generate the .plist file
    plist_content = <<-XML
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>items</key>
    <array>
        <dict>
            <key>assets</key>
            <array>
                <dict>
                    <key>kind</key>
                    <string>software-package</string>
                    <key>url</key>
                    <string>#{ipa_url}</string>
                </dict>
            </array>
            <key>metadata</key>
            <dict>
                <key>bundle-identifier</key>
                <string>com.antoine.SpellingAppOnlinesomething</string> <!-- Adjust your bundle ID -->
                <key>bundle-version</key>
                <string>3.0.0</string> <!-- Replace with your app's version -->
                <key>kind</key>
                <string>software</string>
                <key>title</key>
                <string>Spell Mate</string> <!-- Replace with your app's name -->
            </dict>
        </dict>
    </array>
</dict>
</plist>
    XML
    puts "Writing plist content to #{plist_path} for debugging purposes"
    File.write(plist_path, plist_content)

    # Generate the HTML file
    html_content = <<-HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spell Mate download</title>
</head>
<body>
    <h1>Download Spell Mate</h1>
    <p>Click the link below to download and install Spell Mate:</p>
    <a href="itms-services://?action=download-manifest&url=https://getoffit.github.io/SpellingAppOnline/manifest.plist">Install Your App</a>
</body>
</html>
    HTML

    File.write(html_path, html_content)

    UI.message "Generated .plist and HTML for distribution! \n plist_path: #{plist_path} \n html_path: #{html_path}, ipa_url: #{ipa_url}"
    UI.message "Current working directory: #{Dir.pwd}"
  end

  desc "Fetch distribution certificates and profiles"
  lane :fetchDistributionCertificatesAndProfiles do
    match(
      type: "appstore",
      verbose: true)
  end

  desc "setup xcode version"
  lane :setup_xcode_version do
    xcversion(version: "15.4")  # Ensure you have this version installed
  end
  
  desc "Setup App Store Connect connection"
  lane :app_store_connect_api_key_setup do
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
  end

  desc "Build prod App"
  lane :build_prod_app do
    fetchDistributionCertificatesAndProfiles
    build_app(
      scheme: "SpellingAppOnline",
      workspace: "SpellingAppOnline.xcworkspace",
      configuration: "Release",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates")
    
  end

  desc "Update app version number using current date"
  lane :updateVersionNumber do

    # Fetch the current date components
    current_time = Time.now
    # keeping the major version so I can introduce time based versioning in a reversible way on the App store.
    # If I want to go back to semantic versioning I can just change the major version number
    major_version = "1"
    year = current_time.strftime("%Y")
    month = current_time.strftime("%m")
    day = current_time.strftime("%d")
    new_version = "#{major_version}.#{year}#{month}#{day}.0"
    update_xcconfig_value(
      path: 'versionnumber.xcconfig',
      name: 'VERSION_NUMBER',
      value: new_version
    )
    UI.message("Updated version number to #{new_version}")
  end
  
  def has_commits_in_last_24_hours?
    last_24_hours_commits = `git log --since="24 hours ago" --oneline main`.strip
    !last_24_hours_commits.empty?
  end

  desc "Release latest testflight build"
  lane :releaseLatestTestFlightBuildToAppStore do
    unless has_commits_in_last_24_hours?
      UI.important("No commits in the last 24 hours on the main branch. Skipping release.")
      next
    end

    app_store_connect_api_key_setup
    beta
    deliver(
      skip_binary_upload: true,
      submit_for_review: true,
      automatic_release: true,
      skip_screenshots: true,
      force: true,
      precheck_include_in_app_purchases: false,
      submission_information: {
        add_id_info_uses_idfa: false,
        content_rights_has_rights: false,
        content_rights_contains_third_party_content: false,
        export_compliance_platform: 'ios',
        export_compliance_compliance_required: false,
        export_compliance_encryption_updated: false,
        export_compliance_app_type: nil,
        export_compliance_uses_encryption: false,
        export_compliance_is_exempt: false,
        export_compliance_contains_third_party_cryptography: false,
        export_compliance_contains_proprietary_cryptography: false,
        export_compliance_available_on_french_store: false
      },
      release_notes: {
        'en-GB' => "Updating words to master to finish year 6"
      },
    )
  end

  desc "Increment build number dynamically and build for App Store distribution"
  lane :incrementBuildNumber do
    current_build_number = app_store_build_number(live: false) #//live false means Testflight, true would take the current production build
    increment_build_number(xcodeproj: 'SpellingAppOnline.xcodeproj', build_number: current_build_number + 1)
  end

  desc "Build for App Store distribution and upload to TestFlight"
  lane :beta do
    fetchDistributionCertificatesAndProfiles
    setup_xcode_version
    app_store_connect_api_key_setup
    updateVersionNumber
    incrementBuildNumber
    build_prod_app
    upload_to_testflight
    upload_symbols_to_crashlytics(dsym_path: "/Users/distiller/project/output/gym/SpellingAppOnline.app.dSYM.zip")
    
  end
  
  desc "run the screenshot code"
  lane :snapshotlane do
    xcversion(version: "15.4")  # Ensure you have this version installed
    match(
      type: "development",
      verbose: true)  # Fetch distribution certificates and profiles
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
    snapshot
    frameit
    # deliver
  
  end

#below is just tooling to help with incrementing the build number

  desc "increment build number +1 based on test flight latest number"
  lane :incrementBuildNumberDynamically do
    xcversion(version: "15.4")  # Ensure you have this version installed
    match(
      type: "appstore",
      verbose: true)  # Fetch distribution certificates and profiles
    
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
    current_build_number = app_store_build_number(live: false) #//live false means Testflight, true would take the current production build
    increment_build_number(xcodeproj: 'SpellingAppOnline.xcodeproj', build_number: current_build_number + 1) # +1 here so we can upload to test flight
    build_app(
              scheme: "SpellingAppOnline", 
              workspace: "SpellingAppOnline.xcworkspace",
              configuration: "Release",
              export_method: "app-store",  # Updated export method
              export_xcargs: "-allowProvisioningUpdates")
    # no upload to test flight
  end

  desc "reset my build number to current version"
  lane :fixbuildnumbertocurrentversion do
    xcversion(version: "15.4")  # Ensure you have this version installed
    match(
      type: "appstore",
      verbose: true)  # Fetch distribution certificates and profiles
    
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
    current_build_number = app_store_build_number(live: false) #//live false means Testflight, true would take the current production build
    increment_build_number(xcodeproj: 'SpellingAppOnline.xcodeproj', build_number: current_build_number) # no +1
    # no build
    # no upload to test flight
  end

end
