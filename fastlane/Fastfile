# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Just build a dev build, no signing or upload"
  lane :justbuildDevelopmentbuild do
    xcversion(version: "15.3")
    match(type: "development")
    increment_build_number(xcodeproj: "SpellingAppOnline.xcodeproj")
    build_app(scheme: "SpellingAppOnline",
      configuration: "Debug",
      export_method: "development",
      export_xcargs: "-allowProvisioningUpdates")
  end

  desc "Fetch distribution certificates and profiles"
  lane :fetchDistributionCertificatesAndProfiles do
    match(
      type: "appstore",
      verbose: true)
  end

  desc "setup xcode version"
  lane :setup_xcode_version do
    xcversion(version: "15.3")  # Ensure you have this version installed
  end
  
  desc "Setup App Store Connect connection"
  lane :app_store_connect_api_key_setup do
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
  end

  desc "Build prod App"
  lane :build_prod_app do
    build_app(
      scheme: "SpellingAppOnline",
      workspace: "SpellingAppOnline.xcworkspace",
      configuration: "Release",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates")
    
  end

  desc "List all apps using Spaceship"
  lane :listApps do
    require 'spaceship'

    # Authenticate with the Apple Developer Portal
    Spaceship::Portal.login(ENV['APPFILE_APPLE_ID'], ENV['APPFILE_APPLE_PASSWORD'])
    # Retrieve all apps  
    apps = Spaceship::Portal.app.all
    if apps.any?
      UI.message("Found #{apps.count} apps:")
      apps.each do |app|
        UI.message("#{app.name} (#{app.app_id})")
      end
    else
      UI.message("No apps found")
    end
  end

  desc "Spaceship list latest build number"
  lane :listBuildNumberViaSpaceship do
    require 'spaceship'

    # Authenticate with the Apple Developer Portal
    Spaceship::Portal.login(ENV['APPFILE_APPLE_ID'], ENV['APPFILE_APPLE_PASSWORD'])
    bundle_id = ENV['APPFILE_APP_IDENTIFIER']

    unless bundle_id
      UI.user_error!("You must provide a bundle_id")
    end

    # Find the app by bundle ID
    app = Spaceship::ConnectAPI::App.find(bundle_id)

    if app
      # Fetch the latest build
      builds = Spaceship::ConnectAPI::Build.all(app_id: app.id)
      latest_build = builds.max_by { |build| build.version.to_i }

      if latest_build
        UI.success("Latest TestFlight build number: #{latest_build.version}")
      else
        UI.message("No TestFlight builds found for app with bundle ID #{bundle_id}")
      end
    else
      UI.error("No app found with bundle ID #{bundle_id}")
    end
   
  end

  desc "Ensure the pre-release version exists for the App"
  lane :ensure_pre_release_version do
    require 'spaceship'
    
    # Login to App Store Connect
    Spaceship::ConnectAPI.login(ENV['APPFILE_APPLE_ID'], ENV['APPFILE_APPLE_PASSWORD'])
    app_identifier = ENV['APPFILE_APP_IDENTIFIER']
    
    if app_identifier.nil?
      UI.error("APPFILE_APP_IDENTIFIER environment variable is not set.")
      return
    end
    
    app = Spaceship::ConnectAPI::App.find(app_identifier)
    if app.nil?
      UI.error("Could not find app with bundle ID #{app_identifier}")
      return
    end
    
    # Determine the new pre-release version number using fastlane: https://docs.fastlane.tools/actions/app_store_connect_api_key/
    new_pre_release_version = "1.4.0"
    # just trying to consume ensure version to create a new version in app store connect before uploading a build later
    #https://www.rubydoc.info/gems/fastlane/2.162.0/Spaceship/ConnectAPI/App#ensure_version!-instance_method
    begin
      # Ensure the pre-release version exists
      was_changed = Spaceship::ConnectAPI::App.ensure_version!(version_string: new_pre_release_version, platform: "IOS")
      
      if was_changed
        UI.success("Successfully ensured the pre-release version #{new_pre_release_version} exists for app #{app_identifier}")
      else
        UI.important("The pre-release version #{new_pre_release_version} already exists or no changes were needed for app #{app_identifier}")
      end
    rescue => exception
      UI.error("Failed to ensure the pre-release version for app #{app_identifier}: #{exception.message}")
    end
  end

  desc "Create new version on iTunes connect"
  lane :createNewVersion do
      new_version = "1.3.0"
      require 'spaceship'
      # Login to App Store Connect
      Spaceship::ConnectAPI.login # It will prompt for credentials if not provided
      app_identifier = ENV['APPFILE_APP_IDENTIFIER']
      if app_identifier.nil?
          UI.error("APPFILE_APP_IDENTIFIER environment variable is not set.")
          return
      end
      app = Spaceship::ConnectAPI::Application.find(app_identifier)
    if app.nil?
        UI.error("Could not find app with bundle ID #{app_identifier}")
        return
    end

    begin
      app.create_version!(new_version)
      UI.success("Successfully created a new version #{new_version} for app #{app_identifier}")
    rescue => exception
      UI.error("Failed to create a new version for app #{app_identifier} #{exception.message}")
    end
  end

  desc "Update app version number using current date"
  lane :updateVersionNumber do


    # Fetch the current date components
    current_time = Time.now
    year = current_time.strftime("%y")
    month = current_time.strftime("%m")
    day = current_time.strftime("%d")
    new_version = "#{year}.#{month}.#{day}"
    app_store_connect_api_key_setup
    increment_version_number(version_number: new_version)
    UI.message("Updated version number to #{new_version}")
  end

  desc "Release latest testflight build"
  lane :releaseLatestTestFlightBuild do
    deliver(
      skip_binary_upload: true,
      submit_for_review: true,
      automatic_release: true,
      skip_screenshots: true,
      force: true,
      submission_information: {
        add_id_info_uses_idfa: false,
        content_rights_has_rights: false,
        content_rights_contains_third_party_content: false,
        export_compliance_platform: 'ios',
        export_compliance_compliance_required: false,
        export_compliance_encryption_updated: false,
        export_compliance_app_type: nil,
        export_compliance_uses_encryption: false,
        export_compliance_is_exempt: false,
        export_compliance_contains_third_party_cryptography: false,
        export_compliance_contains_proprietary_cryptography: false,
        export_compliance_available_on_french_store: false
      },
      release_notes: {
        'en-GB' => "Fixes bugs"
      },
    )
  end

  desc "Build for App Store distribution and upload to TestFlight"
  lane :beta do
    fetchDistributionCertificatesAndProfiles
    setup_xcode_version
    app_store_connect_api_key_setup
    current_build_number = app_store_build_number(live: false) #//live false means Testflight, true would take the current production build
    increment_build_number(xcodeproj: 'SpellingAppOnline.xcodeproj', build_number: current_build_number + 1)
    build_prod_app
    upload_to_testflight
    
  end
  
  desc "run the screenshot code"
  lane :snapshotlane do
    xcversion(version: "15.3")  # Ensure you have this version installed
    match(
      type: "development",
      verbose: true)  # Fetch distribution certificates and profiles
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
    snapshot
    frameit
    # deliver
  
  end

#below is just tooling to help with incrementing the build number

  desc "increment build number +1 based on test flight latest number"
  lane :incrementBuildNumberDynamically do
    xcversion(version: "15.3")  # Ensure you have this version installed
    match(
      type: "appstore",
      verbose: true)  # Fetch distribution certificates and profiles
    
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
    current_build_number = app_store_build_number(live: false) #//live false means Testflight, true would take the current production build
    increment_build_number(xcodeproj: 'SpellingAppOnline.xcodeproj', build_number: current_build_number + 1) # +1 here so we can upload to test flight
    build_app(
              scheme: "SpellingAppOnline", 
              workspace: "SpellingAppOnline.xcworkspace",
              configuration: "Release",
              export_method: "app-store",  # Updated export method
              export_xcargs: "-allowProvisioningUpdates")
    # no upload to test flight
  end

  desc "reset my build number to current version"
  lane :fixbuildnumbertocurrentversion do
    xcversion(version: "15.3")  # Ensure you have this version installed
    match(
      type: "appstore",
      verbose: true)  # Fetch distribution certificates and profiles
    
    app_store_connect_api_key(
      key_id: ENV['APP_STORE_CONNECT_API_KEY_KEY_ID'],
      issuer_id: ENV['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_content: ENV['APP_STORE_CONNECT_API_KEY_FILE_BASE64'],
      is_key_content_base64: true,
      in_house: ENV['APP_STORE_CONNECT_API_KEY_IN_HOUSE'] == "true")
    current_build_number = app_store_build_number(live: false) #//live false means Testflight, true would take the current production build
    increment_build_number(xcodeproj: 'SpellingAppOnline.xcodeproj', build_number: current_build_number) # no +1
    # no build
    # no upload to test flight
  end

end
